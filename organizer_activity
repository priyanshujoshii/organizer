let inputArr=process.argv.slice(2);
let fs=require("fs");
let path=require("path");
// console.log(inputArr);
//node main.js tree "directoryPath"
//node main.js organize "directoryPath"
//node main.js help
let command=inputArr[0];
let types= {
    media: ["mp4", "mkv"],
    archives: ['zip', '7z', 'rar', 'tar', 'gz', 'ar', 'iso', "xz"],
    documents: ['docx', 'doc', 'pdf', 'xlsx', 'xls', 'odt', 'ods', 'odp','odf', 'odf', 'txt', 'ps', 'tex'],
    app: ['exe', 'dmg', 'pkg', "deb"]
}
switch(command)
{
    case "tree":
        treeFn(inputArr[1]);
        break;
    case "organize":
        organizeFn(inputArr[1]);
        break;
    case "help":
        helpFn();
        break;
    default:
        console.log("Please input right command");
}
function treeFn(dirPath){
    console.log("Tree command implemented for: ", dirPath);
}
function organizeFn(dirPath){
    // console.log("Organize command implemented for: ", dirPath);
    // 1. input-> directory path
    let destPath;
    if(dirPath==undefined){
        console.log("Kindly Enter the path: ");
        return;
    }else {
    let doesExist=fs.existsSync(dirPath);
    if(doesExist)
    {
        // 2. Create -> organized_files-> directory
        destPath=path.join(dirPath,"Organized_Path");
        if(fs.existsSync(destPath)==false){
            fs.mkdirSync(destPath);
        }
        
    }
    else{
        console.log("Kindly Enter the path: ");
        return;
    }
    }
organizeHelper(dirPath,destPath);
    
   
    // 4th copy / cut files to that organized directory inside the categories folder
    
}
function organizeHelper(src,dest){
 // 3. identify category of files present in input directory
let childNames=fs.readdirSync(src);
// console.log(childNames);
for(let i=0; i< childNames.length; i++)
{
    let childAddress=path.join(src,childNames[i]);
    let isFile=fs.lstatSync(childAddress).isFile();
    if(isFile){
        console.log(childNames[i]);
        let category=getCategory(childNames[i]);
        console.log(childNames[i],"belongs to-->", category);
        // 4th copy / cut files to that organized directory inside the categories folder
        sendFiles(childAddress,dest,category);
    }
}
}
function sendFiles(srcFilePath,dest,category){
    let categoryPath=path.join(dest,category);
    if(fs.existsSync(categoryPath)==false)
    {
        fs.mkdirSync(categoryPath);
    }
    let fileName=path.basename(srcFilePath);
    let destFilePath=path.join(categoryPath, fileName);
    fs.copyFileSync(srcFilePath,destFilePath);
    fs.unlinkSync(srcFilePath);
    console.log(fileName, "copied to ", category);
}
function getCategory(name)
{
let ext=path.extname(name);
// console.log(ext);
ext=ext.slice(1);
for(let type in types){
    let cTypeArray=types[type];
    for(let i=0; i<cTypeArray.length;i++)
    {
        if(ext==cTypeArray[i])
        {
            return type;
        }
    }
}
return "others";
}


function helpFn(){
    console.log(`
    List of All the Commands:
                node main.js tree "directoryPath"
                node main.js organize "directoryPath"
                node main.js help
    `);
}
